function [y1] = myNeuralNetworkFunctionReduced(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 10-Apr-2018 16:06:15.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx24 matrix, input #1
% and returns:
%   y = Qx3 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-5.33571452465426;-3.25045555772381;-5.928475194266;-4.47569229401134;-8.42482350852964;-5.80435319569683;-10.5591751013843;-7.96549652789416;0.0178281772878721;0.00446746734003055;0.0164752033904254;0.0495595861988306;0.00505800949272793;0.0202132440417528;0.00211494579160151;0.0106933757907909;0.0249818896537523;0.0985200995047526;0.0317214709195461;0.0754966313321712;0.00796652331959513;0.062048995830469;0.00235692743450152;0.0206440701976169];
x1_step1.gain = [0.430683457206082;0.700784357833104;0.390715686028688;0.515819142391968;0.421903155332956;0.50728544791521;0.409752091225617;0.46524448467471;6.93538628114941;4.76620453960719;3.32553262470118;4.49161495981832;14.1447768509162;6.43055330838763;79.6462987091533;15.443023197412;5.11352793517055;6.91323324055207;12.1208665507578;6.20841076206173;20.4252526005609;8.37085138530924;67.6254178984666;24.3919782986554];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4049572461891188802;-0.99827469700491811011;1.1617044879333970897;0.23529241158927804989;-0.035931488674097566971;-0.040416678361792690577;0.37407576230984385113;0.48804542210702184235;0.9706342738536469783;-1.4896766919959356645];
IW1_1 = [0.010713677014744424007 1.0421051605233164761 -0.32080813435430660663 -0.05817341525831560417 0.21532754149159047397 -0.19036640935468909785 -0.51880135805020444195 -0.52944871143628491339 -0.45137466528367931051 0.38003728843467365905 -0.0087195482233503422698 -0.19540151649890413754 -0.73530391864282751424 0.35023067890636966348 -0.24842594656256089536 0.73928769702722851864 -0.45731633764962603683 1.1216990027876869718 -0.16148144826904936577 0.10722346170482208172 -0.78067409210206151204 -0.49416298357747795444 0.15805631404406489393 -0.27086098455596924195;0.39683108623836654827 0.48251124331732581085 0.012262851672937028977 0.1700000514324280787 -0.36440377532498152702 -0.32648382497495742616 0.015615747602498722055 0.54700624763055460953 0.69293140763956251327 -0.088651095259289353079 -0.7049550126373057557 0.39615403087510003832 0.51136735107024544611 -0.092384058123815782082 0.075470975951460489428 0.36862338903378577548 0.24927308588738400497 0.27520552003815962339 -0.29065848739807742529 -0.36568792850423537111 -0.28623927803881615839 -0.2345621986572736517 0.30276859351411627985 -0.30187559264065078057;-0.321393832120692724 -0.11702152415443883848 -0.60599836974246190646 -0.45568741297827863868 0.36782881039056786188 -0.88622563186754754749 0.54040216966890819439 -0.12928487892841003526 -0.12105310537127529635 0.47608001891042894815 -0.080909259346658518597 0.44630761436333760139 -0.46459446117633640405 -0.014423275236826897661 -0.0015114850861556311523 0.56577148870379545542 -0.1031200235731140058 0.28335268105273886396 -0.00043034634510864030327 -0.31047169856173117974 0.29239067442635563454 -0.32104479762274101828 -0.38531036258040068931 -0.14109209012964207819;0.22761813361762056607 -0.92131455133391593204 -0.21594819859707170551 0.048942343830239362634 0.7551102933642379611 0.047522968885906922976 -0.48855438815891438775 -0.79340362034193168128 0.62860183355869259092 -0.22781101713314763635 1.1123570494071426396 -0.59133720972776315783 0.64375771525533365125 -0.44493323411747487395 -0.10178329802632167522 -0.20589607472926105269 0.78232121721342828824 -0.34945749564093869788 0.59804335184326951058 -0.25327736875322071075 -0.14872452125777180232 0.055829424196215809983 -0.11601003582859374663 -0.68262208884680397603;-0.4116707069386284501 0.02180855323058152398 -1.2970905736106215222 -0.38332946013699170651 -0.068500746254279779035 0.31215894081700007456 1.3965287912651078717 0.12920994005357586132 1.3777378206912906933 0.63405022862661752914 -1.6411423137014811147 -0.072882161361095071372 0.15960815846285966724 -0.61492688285832042272 0.41777123615753369856 0.46879063238237395073 -0.44804112210418062245 0.5801002828707850778 0.37088460544332829683 0.25435756491877525853 0.25479277874764477696 0.67879614978461810804 -0.57671312369065719228 0.62837310275430036111;-0.46584160719331352274 0.43497123882512067627 -0.1601247730642293976 0.13917346761419283063 -0.1361960236231648802 0.46300025096742936093 0.70439625633447655595 -0.25269599072018994468 0.46712557075972416243 0.73951501471090408391 -0.6463335714675463306 0.40162138239059008704 0.34869729220703776784 -0.041096592606273942005 0.4575440331994559684 -0.11253601365427595704 -0.095375709756012949647 0.23185538527982657575 0.26122619649199896319 0.50862633820971414611 0.39893201834335983991 -0.1865580310857236912 -0.48099034723002903613 0.58218914948339139936;0.004896294395481691486 -0.42343520321952654584 0.54157356536456702223 -0.28860187682298660272 0.037479722625023151328 -1.2207682567691606756 -0.85223661524545357704 -0.51909635345604310253 -1.3670793573236006413 0.011160254391571981097 0.18732227109918950236 0.11172570156213272596 -0.15169836836382108447 0.37083988801297629312 -0.23420943195575189 0.36684109970634909414 0.79042481451776169799 0.37288173737200180913 0.23347860655814739461 0.06572667508513273249 -0.38090586119353025962 -0.14353901553627992915 0.031229364926667051161 0.096903553124817090603;-0.43493372245854744484 0.7714613767864002547 -0.87234864137931267258 0.19958827167944556691 0.18671526490204173876 0.7118766205060659269 -0.32068472331328157221 0.42281879529318860955 0.37197662428019062641 -0.69998094056785986616 -0.1175519614573752869 0.59694428639988372787 0.076684017968925238806 -0.10306829458971344948 0.43927800108511844135 0.95300034101998765124 -1.2629639491408863883 0.70800712280304467505 -0.099831297194977020037 0.85211751606857444319 -0.76436659522629690766 0.1271293892738642739 -0.39433151325292797873 -0.10752510618865307457;-0.042867981560090147319 0.0087023574703208508158 -0.15975392201978466655 0.67572999361915209171 0.43883253622200207866 0.41828561928641599943 -0.020676928973097117442 0.37286620591587144036 0.096871191358733843568 -0.14743069947214540449 -0.51749559973845893346 0.4030850364189983992 0.041273859804525199479 0.72413700454139284801 -0.24211687922233185444 0.25284152544912269489 -0.021449029950717884291 0.79102947707331361382 0.17281024496497998655 0.70166146963081299504 -0.77362335852545438541 0.045282041440926630582 -0.54126973369610575926 -0.031749059237230627117;-0.069237365622139460108 -1.0225187870547922664 -0.10362927845885450129 1.1583078671756861233 -0.6112204344269777101 0.010315852525485098498 -0.10842866759054416159 0.3989626953657441355 -0.26630828430515146588 0.54777297489899423599 0.099319009127301585704 0.099215067232669734709 -0.54971315376442908551 -0.2237670646744964742 0.23970010685284762197 -0.16193162424414911382 -0.11912774062690660581 -0.40836643384276938296 -0.5859992413388507293 0.004052704037794302265 -0.20225599404826094529 0.73798297179662120104 0.013979405239939710764 0.20408553846531629627];

% Layer 2
b2 = [0.60221067142130435546;-0.73437081729041286948;-0.50957165627598621782];
LW2_1 = [1.7755880752232857667 -1.1317057563612538118 0.90790315041945524044 -0.6640382413516929816 -1.8436720093899832129 -0.66951661839261389364 1.533156287481485025 -2.0074076580511697188 -1.0514202402769434741 -1.5603008648697502814;0.4982903538943697086 0.1114025604243498585 1.3114760985776370283 -0.13204320669154687162 2.5984828060491200752 0.95755494789643136322 -1.0794552931336500734 0.78010691693702971516 -0.019883888371316583987 0.032062198615091165588;-0.56302672572375900284 -0.60408150761904433335 -0.56227324477873485975 2.0182231570236193186 -1.8218244869116433371 -0.56302297816483670712 -0.56613813181279792897 0.98132092195763320763 0.35521221860500679091 1.0222803010954801817];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = softmax_apply(repmat(b2,1,Q) + LW2_1*a1);

% Output 1
y1 = a2;
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Competitive Soft Transfer Function
function a = softmax_apply(n,~)
if isa(n,'gpuArray')
    a = iSoftmaxApplyGPU(n);
else
    a = iSoftmaxApplyCPU(n);
end
end
function a = iSoftmaxApplyCPU(n)
nmax = max(n,[],1);
n = bsxfun(@minus,n,nmax);
numerator = exp(n);
denominator = sum(numerator,1);
denominator(denominator == 0) = 1;
a = bsxfun(@rdivide,numerator,denominator);
end
function a = iSoftmaxApplyGPU(n)
nmax = max(n,[],1);
numerator = arrayfun(@iSoftmaxApplyGPUHelper1,n,nmax);
denominator = sum(numerator,1);
a = arrayfun(@iSoftmaxApplyGPUHelper2,numerator,denominator);
end
function numerator = iSoftmaxApplyGPUHelper1(n,nmax)
numerator = exp(n - nmax);
end
function a = iSoftmaxApplyGPUHelper2(numerator,denominator)
if (denominator == 0)
    a = numerator;
else
    a = numerator ./ denominator;
end
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end
